# Deploy TAS Securesign with all monitoring enabled (Real Production Template)
# roles/tas_deploy/tasks/main.yml
---
- name: "Deploy baseline TAS Securesign instance"
  k8s:
    state: present
    definition: "{{ lookup('template', 'securesign-cr.yml.j2') }}"

- name: "Display TAS deployment status"
  debug:
    msg:
      - "TAS Securesign deployment initiated"
      - "Instance: {{ baseline.instance_name }}"
      - "Namespace: {{ baseline_namespace }}"

# Check each TAS component readiness
- name: "Check Trillian component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: Trillian
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: trillian_status
  retries: 30
  delay: 10
  until: >
    trillian_status.resources | length > 0 and
    trillian_status.resources[0].status is defined and
    trillian_status.resources[0].status.conditions is defined and
    (trillian_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Check Fulcio component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: Fulcio
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: fulcio_status
  retries: 30
  delay: 10
  until: >
    fulcio_status.resources | length > 0 and
    fulcio_status.resources[0].status is defined and
    fulcio_status.resources[0].status.conditions is defined and
    (fulcio_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Check Rekor component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: Rekor
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: rekor_status
  retries: 30
  delay: 10
  until: >
    rekor_status.resources | length > 0 and
    rekor_status.resources[0].status is defined and
    rekor_status.resources[0].status.conditions is defined and
    (rekor_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Check CTlog component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: CTlog
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: ctlog_status
  retries: 30
  delay: 10
  until: >
    ctlog_status.resources | length > 0 and
    ctlog_status.resources[0].status is defined and
    ctlog_status.resources[0].status.conditions is defined and
    (ctlog_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Check TimestampAuthority component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: TimestampAuthority
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: tsa_status
  retries: 30
  delay: 10
  until: >
    tsa_status.resources | length > 0 and
    tsa_status.resources[0].status is defined and
    tsa_status.resources[0].status.conditions is defined and
    (tsa_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Check Tuf component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: Tuf
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: tuf_status
  retries: 30
  delay: 10
  until: >
    tuf_status.resources | length > 0 and
    tuf_status.resources[0].status is defined and
    tuf_status.resources[0].status.conditions is defined and
    (tuf_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Check SecureSign component readiness"
  k8s_info:
    api_version: rhtas.redhat.com/v1alpha1
    kind: Securesign
    name: "{{ baseline.instance_name }}"
    namespace: "{{ baseline_namespace }}"
  register: securesign_status
  retries: 30
  delay: 10
  until: >
    securesign_status.resources | length > 0 and
    securesign_status.resources[0].status is defined and
    securesign_status.resources[0].status.conditions is defined and
    (securesign_status.resources[0].status.conditions | 
     selectattr('type', 'equalto', 'Ready') | 
     selectattr('status', 'equalto', 'True') | list | length > 0)

- name: "Apply resource requests and limits to Fulcio Deployment"
  k8s:
    state: present
    kind: Deployment
    name: fulcio-server
    namespace: "{{ baseline.namespace }}"
    definition:
      spec:
        template:
          spec:
            containers:
              - name: fulcio-server
                resources:
                  requests:
                    cpu: "{{ resources.fulcio.requests.cpu }}"
                    memory: "{{ resources.fulcio.requests.memory }}"
                  limits:
                    cpu: "{{ resources.fulcio.limits.cpu }}"
                    memory: "{{ resources.fulcio.limits.memory }}"
    merge_type: strategic-merge

- name: "Apply resource requests and limits to Rekor Deployment"
  k8s:
    state: present
    kind: Deployment
    name: rekor-server
    namespace: "{{ baseline.namespace }}"
    definition:
      spec:
        template:
          spec:
            containers:
              - name: rekor-server
                resources:
                  requests:
                    cpu: "{{ resources.rekor.requests.cpu }}"
                    memory: "{{ resources.rekor.requests.memory }}"
                  limits:
                    cpu: "{{ resources.rekor.limits.cpu }}"
                    memory: "{{ resources.rekor.limits.memory }}"
    merge_type: strategic-merge

- name: "Apply resource requests and limits to Trillian Log Server Deployment"
  k8s:
    state: present
    kind: Deployment
    name: trillian-logserver
    namespace: "{{ baseline.namespace }}"
    definition:
      spec:
        template:
          spec:
            containers:
              - name: trillian-logserver
                resources:
                  requests:
                    cpu: "{{ resources.trillian_logserver.requests.cpu }}"
                    memory: "{{ resources.trillian_logserver.requests.memory }}"
                  limits:
                    cpu: "{{ resources.trillian_logserver.limits.cpu }}"
                    memory: "{{ resources.trillian_logserver.limits.memory }}"
    merge_type: strategic-merge

- name: "Apply resource requests and limits to Trillian Log Signer Deployment"
  k8s:
    state: present
    kind: Deployment
    name: trillian-logsigner
    namespace: "{{ baseline.namespace }}"
    definition:
      spec:
        template:
          spec:
            containers:
              - name: trillian-logsigner
                resources:
                  requests:
                    cpu: "{{ resources.trillian_logsigner.requests.cpu }}"
                    memory: "{{ resources.trillian_logsigner.requests.memory }}"
                  limits:
                    cpu: "{{ resources.trillian_logsigner.limits.cpu }}"
                    memory: "{{ resources.trillian_logsigner.limits.memory }}"
    merge_type: strategic-merge

- name: "Apply resource requests and limits to CTLog Deployment"
  k8s:
    state: present
    kind: Deployment
    name: ctlog
    namespace: "{{ baseline.namespace }}"
    definition:
      spec:
        template:
          spec:
            containers:
              - name: ctlog
                resources:
                  requests:
                    cpu: "{{ resources.ctlog.requests.cpu }}"
                    memory: "{{ resources.ctlog.requests.memory }}"
                  limits:
                    cpu: "{{ resources.ctlog.limits.cpu }}"
                    memory: "{{ resources.ctlog.limits.memory }}"
    merge_type: strategic-merge

- name: "Apply resource requests and limits to TSA Deployment"
  k8s:
    state: present
    kind: Deployment
    name: tsa-server
    namespace: "{{ baseline.namespace }}"
    definition:
      spec:
        template:
          spec:
            containers:
              - name: tsa-server
                resources:
                  requests:
                    cpu: "{{ resources.tsa.requests.cpu }}"
                    memory: "{{ resources.tsa.requests.memory }}"
                  limits:
                    cpu: "{{ resources.tsa.limits.cpu }}"
                    memory: "{{ resources.tsa.limits.memory }}"
    merge_type: strategic-merge

- name: "Verify ServiceMonitors are created"
  k8s_info:
    api_version: monitoring.coreos.com/v1
    kind: ServiceMonitor
    namespace: "{{ baseline_namespace }}"
  register: service_monitors
  retries: 5
  delay: 30
  until: service_monitors.resources | length >= 6  # Expect at least 6 ServiceMonitors